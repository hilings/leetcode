package main

import (
	"fmt"
)

func crackSafe(n int, k int) string {
	fmt.Printf("\ncrackSafe, n =%d, k = %d\n", n, k)
	visited := map[string]bool{}
	r := ""
	p := 1 // pow(k, n)
	for i := 0; i < n; i++ {
		r += "0"
		p *= k
	}
	visited[r] = true
	for i := 0; i < p-1; i++ {
		prefix := r[len(r)-n+1:]
		fmt.Printf("prefix = %s\n", prefix)
		for j := k - 1; j >= 0; j-- {
			suffix := fmt.Sprintf("%c", '0'+j)
			tmp := prefix + suffix
			if _, ok := visited[tmp]; ok {
				fmt.Printf("\t%s visited\n", tmp)
				continue
			}
			r += suffix
			visited[tmp] = true
			fmt.Printf("\tappending %s, marking %s\n", suffix, tmp)
			break
		}
	}
	return r
}

// func main() {
// 	fmt.Printf("LeetCode 753. Cracking the Safe ...\n\n")

// 	type args struct {
// 		n int
// 		k int
// 	}
// 	tests := []struct {
// 		args args
// 		want string
// 	}{
// 		{
// 			args: args{
// 				n: 1,
// 				k: 2,
// 			},
// 			want: "10",
// 		},
// 		{
// 			args: args{
// 				n: 2,
// 				k: 2,
// 			},
// 			want: "01100",
// 		},
// 		{
// 			args: args{
// 				n: 3,
// 				k: 3,
// 			},
// 			want: "00022212202112102012001110100",
// 		},
// 		{
// 			args: args{
// 				n: 2,
// 				k: 4,
// 			},
// 			want: "00332313022120110",
// 		},
// 		{
// 			args: args{
// 				n: 4,
// 				k: 8,
// 			},
// 			want
// 		},
// 	}
// 	for _, tt := range tests {
// 		r := crackSafe(tt.args.n, tt.args.k)
// 		fmt.Printf("got      = %s, len = %d\n", r, len(r))
// 		fmt.Printf("expected = %s, len = %d\n", tt.want, len(tt.want))
// 	}
// }
